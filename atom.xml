<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pink-Floyd</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0xffffffff.com/"/>
  <updated>2017-02-26T08:54:39.081Z</updated>
  <id>http://0xffffffff.com/</id>
  
  <author>
    <name>Pink Floyd</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://0xffffffff.com/2017/02/26/TestUtil/"/>
    <id>http://0xffffffff.com/2017/02/26/TestUtil/</id>
    <published>2017-02-26T08:55:48.784Z</published>
    <updated>2017-02-26T08:54:39.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TestUtil"><a href="#TestUtil" class="headerlink" title="TestUtil"></a>TestUtil</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> K &#123;</div><div class="line">    <span class="keyword">namespace</span> Test &#123;</div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container&gt;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print_container</span><span class="params">( Container &amp;container, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;name = <span class="string">""</span> )</span> </span>&#123;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Container "</span> &lt;&lt; name &lt;&lt; <span class="string">" :"</span>;</div><div class="line">            <span class="keyword">for</span> ( <span class="keyword">auto</span> val : container ) &#123;</div><div class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">" "</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Container1, <span class="keyword">typename</span> Container2&gt;</div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">container_equal</span><span class="params">( Container1 &amp;con1, Container2 &amp;con2 )</span> </span>&#123;</div><div class="line">            <span class="keyword">auto</span> first1 = <span class="built_in">std</span>::begin( con1 ), last1 = <span class="built_in">std</span>::end( con1 );</div><div class="line">            <span class="keyword">auto</span> first2 = <span class="built_in">std</span>::begin( con2 ), last2 = <span class="built_in">std</span>::end( con2 );</div><div class="line">            <span class="keyword">for</span> ( ; first1 != last1 &amp;&amp; first2 != last2; ++first1, ++first2 ) &#123;</div><div class="line">                <span class="keyword">if</span> ( *first1 != *first2 ) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (first1 == last1 &amp;&amp; first2 == last2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TestUtil&quot;&gt;&lt;a href=&quot;#TestUtil&quot; class=&quot;headerlink&quot; title=&quot;TestUtil&quot;&gt;&lt;/a&gt;TestUtil&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
  </entry>
  
</feed>
